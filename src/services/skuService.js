// SKU Service for SKU Creation, Search, and Deactivation Libraries
import { mockSKUs } from '../data/mockData';
import { v4 as uuidv4 } from 'uuid';

// In-memory storage to simulate database
let skus = [...mockSKUs];

const skuService = {
  // Create a new SKU
  createSKU: (skuData) => {
    const newSKU = {
      id: `sku-${uuidv4().substring(0, 8)}`,
      code: skuData.code || skuService.generateSKUCode(skuData),
      itemName: skuData.itemName,
      category: skuData.category,
      subcategory: skuData.subcategory,
      brandName: skuData.brandName,
      branchId: skuData.branchId,
      isActive: true,
      barcode: null, // Will be generated by barcode service
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      deactivatedAt: null
    };
    
    skus.push(newSKU);
    return newSKU;
  },
  
  // Auto-generate SKU code based on item data
  generateSKUCode: (itemData) => {
    const categoryPrefix = itemData.category.substring(0, 2).toUpperCase();
    const subcategoryPrefix = itemData.subcategory.substring(0, 2).toUpperCase();
    const brandSuffix = itemData.brandName.substring(0, 3).toUpperCase();
    
    // Generate a random 2-digit number
    const randomNum = Math.floor(Math.random() * 100).toString().padStart(2, '0');
    
    return `${categoryPrefix}-${subcategoryPrefix}-${randomNum}-${brandSuffix}`;
  },
  
  // Get all SKUs with optional filters
  getSKUs: (filters = {}) => {
    let filteredSKUs = [...skus];
    
    // Apply filters if provided
    if (filters.isActive !== undefined) {
      filteredSKUs = filteredSKUs.filter(sku => sku.isActive === filters.isActive);
    }
    
    if (filters.branchId) {
      filteredSKUs = filteredSKUs.filter(sku => sku.branchId === filters.branchId);
    }
    
    if (filters.category) {
      filteredSKUs = filteredSKUs.filter(sku => sku.category === filters.category);
    }
    
    if (filters.brandName) {
      filteredSKUs = filteredSKUs.filter(sku => sku.brandName === filters.brandName);
    }
    
    return filteredSKUs;
  },
  
  // Search SKUs by various parameters
  searchSKUs: (searchTerm) => {
    if (!searchTerm) return skus;
    
    const term = searchTerm.toLowerCase();
    return skus.filter(sku => 
      sku.code.toLowerCase().includes(term) ||
      sku.itemName.toLowerCase().includes(term) ||
      sku.category.toLowerCase().includes(term) ||
      sku.subcategory.toLowerCase().includes(term) ||
      sku.brandName.toLowerCase().includes(term)
    );
  },
  
  // Get SKU by ID
  getSKUById: (id) => {
    return skus.find(sku => sku.id === id);
  },
  
  // Update SKU details
  updateSKU: (id, skuData) => {
    const index = skus.findIndex(sku => sku.id === id);
    if (index === -1) return null;
    
    const updatedSKU = {
      ...skus[index],
      ...skuData,
      updatedAt: new Date().toISOString()
    };
    
    skus[index] = updatedSKU;
    return updatedSKU;
  },
  
  // Deactivate SKU (mark as inactive)
  deactivateSKU: (id) => {
    const index = skus.findIndex(sku => sku.id === id);
    if (index === -1) return null;
    
    const deactivatedSKU = {
      ...skus[index],
      isActive: false,
      updatedAt: new Date().toISOString(),
      deactivatedAt: new Date().toISOString()
    };
    
    skus[index] = deactivatedSKU;
    return deactivatedSKU;
  }
};

export default skuService;
